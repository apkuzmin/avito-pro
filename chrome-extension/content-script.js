// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –¥–µ—Ñ–æ–ª—Ç—ã ===
const DEFAULT_ORIGINAL = ['–æ—Ä–∏–≥–∏–Ω–∞–ª'];
const DEFAULT_FAKE = ['—Ä–µ–ø–ª–∏–∫–∞', '–ø–∞–ª—å', '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ª—é–∫—Å', '—Ä–∞–∑–º–µ—Ä—ã', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–≤ –Ω–∞–ª–∏—á–∏–∏', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è', '–∫–∞—á–µ—Å—Ç–≤–∞', '—Ä–∞–∑–º–µ—Ä–Ω—ã–π'];
const BLACKLIST_OFFER_KEY = 'blacklistOffers';
const BLACKLIST_USER_KEY = 'blacklistUsers';
const BTN_CONTAINER_CLASS = 'avito-blacklist-btn-container';

// –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
(function injectBlacklistStyles() {
  if (document.getElementById('avito-bl-styles')) return;
  const style = document.createElement('style');
  style.id = 'avito-bl-styles';
  style.textContent = `
    .${BTN_CONTAINER_CLASS} {display:none;position:absolute;right:4px;top:4px;z-index:9999;gap:4px;}
    div[data-marker="item"]:hover .${BTN_CONTAINER_CLASS} {display:flex;}
    .avito-bl-btn{width:24px;height:24px;background:#000000c0;border:none;border-radius:4px;color:#fff;font-size:16px;line-height:1;display:flex;align-items:center;justify-content:center;cursor:pointer;}
    .avito-bl-btn:hover{background:#ff5252;}
  `;
  document.head.appendChild(style);
})();

// –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å —Å–ø–∏—Å–∫–∞–º–∏ –ß–°
function updateStorageList(key, updater) {
  chrome.storage.sync.get([key], (data) => {
    const list = Array.isArray(data[key]) ? data[key] : [];
    const updated = updater(list);
    chrome.storage.sync.set({ [key]: updated });
  });
}

function addToBlacklist(key, id) {
  updateStorageList(key, (list) => (list.includes(id) ? list : [...list, id]));
}

// –ü–æ–ª—É—á–∏—Ç—å id –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ)
function getSellerId(item) {
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const link = item.querySelector('a[href*="/user/"]') || item.querySelector('a[href*="sellerId="]');
  if (!link) return null;
  const href = link.href;
  const m1 = href.match(/\/user\/([\w-]+)/);
  if (m1) return m1[1];
  const m2 = href.match(/sellerId=(\d+)/);
  if (m2) return m2[1];
  return null;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
function getReviewCount(item) {
  // –ò—â–µ–º –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–æ ¬´–æ—Ç–∑—ã–≤¬ª
  const reviewNode = Array.from(item.querySelectorAll('span, div'))
    .find((el) => /–æ—Ç–∑—ã–≤/i.test(el.textContent));
  if (!reviewNode) return null;
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º ¬´–æ—Ç–∑—ã–≤¬ª/¬´–æ—Ç–∑—ã–≤–∞¬ª/¬´–æ—Ç–∑—ã–≤–æ–≤¬ª
  const m = reviewNode.textContent.replace(/\s+/g, ' ').match(/(\d+)\s*–æ—Ç–∑—ã–≤/i);
  return m ? parseInt(m[1], 10) : null;
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
function addBlacklistButtons(item, offerId, sellerId) {
  if (!offerId && !sellerId) return;
  if (item.querySelector(`.${BTN_CONTAINER_CLASS}`)) return; // —É–∂–µ –µ—Å—Ç—å

  const container = document.createElement('div');
  container.className = BTN_CONTAINER_CLASS;

  if (offerId) {
    const offerBtn = document.createElement('button');
    offerBtn.className = 'avito-bl-btn';
    offerBtn.title = '–°–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ';
    offerBtn.textContent = '√ó';
    offerBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      addToBlacklist(BLACKLIST_OFFER_KEY, offerId);
      item.style.display = 'none';
    });
    container.appendChild(offerBtn);
  }

  if (sellerId) {
    const sellerBtn = document.createElement('button');
    sellerBtn.className = 'avito-bl-btn';
    sellerBtn.title = '–°–∫—Ä—ã—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞';
    sellerBtn.textContent = 'üö´';
    sellerBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      addToBlacklist(BLACKLIST_USER_KEY, sellerId);
      item.style.display = 'none';
    });
    container.appendChild(sellerBtn);
  }

  item.style.position = 'relative';
  item.appendChild(container);
}

// –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "—Ü–µ–ª—ã—Ö" —Å–ª–æ–≤, —É—á–∏—Ç—ã–≤–∞—è Unicode –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã
function containsWholeWord(text, word) {
  if (!word) return false;
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª—ã RegExp
  const escaped = word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  // –ì—Ä–∞–Ω–∏—Ü–µ–π —Å–ª–æ–≤–∞ —Å—á–∏—Ç–∞–µ–º –ª—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ù–ï —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–π (–ª—é–±–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏)
  const pattern = new RegExp(`(^|[^\\p{L}\\p{N}])${escaped.toLowerCase()}([^\\p{L}\\p{N}]|$)`, 'iu');
  return pattern.test(text);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ Avito
function filterListings(settings) {
  const itemSelector = 'div[data-marker="item"]';
  const priceSelector = '[data-marker="item-price"]';
  const titleSelector = 'h3';
  const badgeClass = 'avito-filter-badge';
  // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –±–µ–π–¥–∂–∞, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ Avito-–ø–ª–∞—à–∫–∏ (–∫–∞–∫ ¬´–ú–æ–ª–ª¬ª)
  const BADGE_STYLE =
    'display:inline-flex;align-items:center;white-space:nowrap;font-size:12px;font-weight:600;' +
    'padding:2px 6px;border-radius:4px;color:#fff;pointer-events:none;';

  // ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–µ–π–¥–∂–∞ =====
  // –î–µ–ª–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Ü–µ–Ω—ã, –∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é.
  function placeBadge(cardNode, badgeEl) {
    // –ï—Å–ª–∏ –±–µ–π–¥–∂ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (badgeEl.parentElement && badgeEl.parentElement.classList.contains('avito-filter-badge-wrapper')) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª)
    if (badgeEl.parentElement) {
      badgeEl.parentElement.removeChild(badgeEl);
    }

    // 1) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞–º–∏ —Ä—è–¥
    let badgeRow = cardNode.querySelector('.avito-custom-badge-row');

    // 2) –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º ¬´—Ä–æ–¥–Ω–æ–π¬ª —Ä—è–¥ Avito, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –°–†–ê–ó–£ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Ü–µ–Ω—ã
    if (!badgeRow) {
      // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Ü–µ–Ω—ã
      const priceEl =
        cardNode.querySelector('[data-marker="item-price"]') ||
        cardNode.querySelector('[itemprop="price"]');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ü–µ–Ω—ã, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä—è–¥
      let priceContainer = priceEl ? priceEl.parentElement : null;

      // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –º–∞–∫—Å–∏–º—É–º –Ω–∞ 3 —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä-—Ä–æ–¥–∏—Ç–µ–ª—å –¥–ª—è –±–ª–æ–∫–∞ —Ü–µ–Ω—ã
      let level = 0;
      while (priceContainer && priceContainer.parentElement !== cardNode && level < 3) {
        priceContainer = priceContainer.parentElement;
        level++;
      }

      if (priceContainer) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ü–µ–Ω—ã,
        // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ Avito –¥–ª—è –ø–ª–∞—à–µ–∫/–ª–µ–π–±–ª–æ–≤
        let sibling = priceContainer.nextElementSibling;
        while (sibling) {
          if (sibling.classList && sibling.classList.contains('SnippetLayout-root')) {
            badgeRow = sibling;
            break;
          }
          sibling = sibling.nextElementSibling;
        }

        // –ï—Å–ª–∏ –ø–æ –ø—Ä—è–º—ã–º —Å–æ—Å–µ–¥—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –õ–Æ–ë–£–Æ
        // –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ.
        if (!badgeRow) {
          badgeRow = Array.from(cardNode.querySelectorAll('.SnippetLayout-root')).find(
            (el) => !el.classList.contains('avito-custom-badge-row')
          );
        }
      }
    }

    // 3) –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä—è–¥ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Ü–µ–Ω—ã (–∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
    if (!badgeRow) {
      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Ü–µ–Ω—ã –∏ –µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Ä—è–¥
      const priceEl =
        cardNode.querySelector('[data-marker="item-price"]') ||
        cardNode.querySelector('[itemprop="price"]');
      let priceContainer = priceEl ? priceEl.parentElement : null;
      let level = 0;
      while (priceContainer && priceContainer.parentElement !== cardNode && level < 3) {
        priceContainer = priceContainer.parentElement;
        level++;
      }

      badgeRow = document.createElement('div');
      badgeRow.className = 'SnippetLayout-root avito-custom-badge-row';
      badgeRow.style.display = 'flex';
      badgeRow.style.flexWrap = 'wrap';
      badgeRow.style.gap = '4px';
      badgeRow.style.marginTop = '4px';

      if (priceContainer) {
        priceContainer.insertAdjacentElement('afterend', badgeRow);
      } else {
        // Fallback: –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏
        cardNode.prepend(badgeRow);
      }
    }

    // –ò—â–µ–º/—Å–æ–∑–¥–∞—ë–º –≤—Ä–∞–ø–ø–µ—Ä –¥–ª—è –Ω–∞—à–∏—Ö –±–µ–π–¥–∂–µ–π
    let wrapper = cardNode.querySelector('.avito-filter-badge-wrapper');
    if (!wrapper) {
      wrapper = document.createElement('div');
      wrapper.className = 'avito-filter-badge-wrapper SnippetLayout-item-custom';
      wrapper.style.marginRight = '4px';
      badgeRow.prepend(wrapper);
    }

    wrapper.appendChild(badgeEl);
  }

  const items = document.querySelectorAll(itemSelector);
  items.forEach((item) => {
    let hide = false;

    // –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —á–∏—Å–ª–æ –æ—Ç–∑—ã–≤–æ–≤
    let sellerId = getSellerId(item);
    const reviewCount = getReviewCount(item);
    if (reviewCount !== null && reviewCount > settings.maxSellerReviews && settings.hideTopSellers) {
      hide = true;
      // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –ß–°, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ
      if (sellerId) {
        addToBlacklist(BLACKLIST_USER_KEY, sellerId);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
    const price = extractPrice(item);
    if (price !== null) {
      if (settings.minPrice !== null && price < settings.minPrice) hide = true;
      if (settings.maxPrice !== null && price > settings.maxPrice) hide = true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const titleElement =
      item.querySelector('[data-marker="item-title"]') ||
      item.querySelector('h3') ||
      item.querySelector('a[itemprop="name"]') ||
      item.querySelector('h2');
    const titleText = titleElement ? titleElement.textContent.toLowerCase() : '';

    // NEW: —É—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ Avito –ø—Ä—è—á–µ—Ç –≤ <meta itemprop="description" content="‚Ä¶">
    const metaDescription = item.querySelector('meta[itemprop="description"]');
    const metaDescText = metaDescription ? metaDescription.getAttribute('content').toLowerCase() : '';

    const cardText = item.textContent.toLowerCase();
    const searchText = titleText + ' ' + cardText + ' ' + metaDescText;

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
    if (settings.keywords && settings.keywords.length) {
      for (const word of settings.keywords) {
        if (containsWholeWord(searchText, word)) {
          hide = true;
          break;
        }
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
    let hasOriginal = false;
    let hasFake = false;

    if (settings.originalKeywords && settings.originalKeywords.length) {
      settings.originalKeywords.forEach((word) => {
        if (containsWholeWord(searchText, word)) {
          hasOriginal = true;
        }
      });
    }

    if (settings.fakeKeywords && settings.fakeKeywords.length) {
      settings.fakeKeywords.forEach((word) => {
        if (containsWholeWord(searchText, word)) {
          hasFake = true;
        }
      });
    }

    // –ü—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –∏ –ø–∞–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä –ø–∞–ª—ë–Ω—ã–º
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ¬´–ü–∞–ª—å¬ª –Ω–∞–¥ ¬´–û—Ä–∏–≥–∏–Ω–∞–ª¬ª
    let badgeText = '';
    if (hasFake) {
      badgeText = '–ü–∞–ª—å';
    } else if (hasOriginal) {
      badgeText = '–û—Ä–∏–≥–∏–Ω–∞–ª';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    const offerId = item.getAttribute('data-item-id');
    if (settings.blacklistOffers && offerId && settings.blacklistOffers.includes(offerId)) hide = true;
    if (settings.blacklistUsers && sellerId && settings.blacklistUsers.includes(sellerId)) hide = true;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å–∫—Ä—ã—Ç–æ)
    if (!hide) {
      addBlacklistButtons(item, offerId, sellerId);
    }

    // === –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–π–¥–∂–µ–π ===
    // –ï—Å–ª–∏ –±–µ–π–¥–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    if (!settings.showBadges) {
      const existing = item.querySelectorAll(`.${badgeClass}`);
      existing.forEach((el) => el.remove());
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
      if (badgeText) {
        let badgeEl = item.querySelector(`.${badgeClass}`);

        const bgColor = badgeText === '–û—Ä–∏–≥–∏–Ω–∞–ª' ? '#28a745' /* –∑–µ–ª—ë–Ω—ã–π */ : '#d6336c' /* –∫—Ä–∞—Å–Ω—ã–π */;

        if (!badgeEl) {
          badgeEl = document.createElement('span');
          badgeEl.className = badgeClass;
          badgeEl.style.cssText = BADGE_STYLE + `background:${bgColor};`;
        }

        badgeEl.textContent = badgeText;
        badgeEl.style.cssText = BADGE_STYLE + `background:${bgColor};`;

        // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
        placeBadge(item, badgeEl);
      } else {
        // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –±–µ–π–¥–∂, –Ω–æ —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º
        const existing = item.querySelectorAll(`.${badgeClass}`);
        existing.forEach((el) => el.remove());
      }
    }

    if (settings.hideFake && badgeText === '–ü–∞–ª—å') hide = true;

    item.style.display = hide ? 'none' : '';
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
function extractPrice(item) {
  // 1) meta[itemprop="price"] –∏–º–µ–µ—Ç —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –≤ –∞—Ç—Ä–∏–±—É—Ç–µ content
  const meta = item.querySelector('meta[itemprop="price"]');
  if (meta && meta.getAttribute('content')) {
    const v = parseInt(meta.getAttribute('content').replace(/\D/g, ''), 10);
    if (!Number.isNaN(v)) return v;
  }
  // 2) –Ø–≤–Ω—ã–π data-marker
  let priceEl = item.querySelector('[data-marker="item-price"]');
  if (priceEl) {
    const priceText = priceEl.textContent.replace(/\D/g, '');
    const price = parseInt(priceText, 10);
    if (!Number.isNaN(price)) return price;
  }
  // 3) itemprop="price" (–µ—Å–ª–∏ –Ω–µ meta)
  priceEl = item.querySelector('[itemprop="price"]');
  if (priceEl) {
    const priceText = (priceEl.textContent || priceEl.getAttribute('content') || '').replace(/\D/g, '');
    const price = parseInt(priceText, 10);
    if (!Number.isNaN(price)) return price;
  }
  return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
function initFiltering() {
  function loadAndFilter() {
    chrome.storage.sync.get(['minPrice', 'maxPrice', 'keywords', 'originalKeywords', 'fakeKeywords', 'showBadges', 'hideFake', 'hideTopSellers', 'maxSellerReviews', BLACKLIST_OFFER_KEY, BLACKLIST_USER_KEY], (data) => {
      const toBool = (v, def) => {
        if (typeof v === 'boolean') return v;
        if (typeof v === 'string') return v === 'true';
        return def;
      };

      const settings = {
        minPrice: Number.isFinite(data.minPrice) ? data.minPrice : null,
        maxPrice: Number.isFinite(data.maxPrice) ? data.maxPrice : null,
        keywords: data.keywords ? data.keywords.split(',').map((w) => w.trim()).filter(Boolean) : [],
        originalKeywords: data.originalKeywords ? data.originalKeywords.split(',').map((w) => w.trim()).filter(Boolean) : DEFAULT_ORIGINAL,
        fakeKeywords: data.fakeKeywords ? data.fakeKeywords.split(',').map((w) => w.trim()).filter(Boolean) : DEFAULT_FAKE,
        showBadges: data.showBadges === undefined ? true : toBool(data.showBadges, true),
        hideFake: data.hideFake === undefined ? true : toBool(data.hideFake, true),
        hideTopSellers: data.hideTopSellers === undefined ? true : toBool(data.hideTopSellers, true),
        blacklistOffers: Array.isArray(data[BLACKLIST_OFFER_KEY]) ? data[BLACKLIST_OFFER_KEY] : [],
        blacklistUsers: Array.isArray(data[BLACKLIST_USER_KEY]) ? data[BLACKLIST_USER_KEY] : [],
        maxSellerReviews: Number.isFinite(data.maxSellerReviews) ? data.maxSellerReviews : 100
      };

      filterListings(settings);
    });
  }

  // –ü–µ—Ä–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  loadAndFilter();

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM
  const observer = new MutationObserver(loadAndFilter);
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤, –Ω–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.
  // –ù–∞ Avito –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —á–∞—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ¬´—Å–∫–µ–ª–µ—Ç¬ª,
  // –∞ –∑–∞—Ç–µ–º –º–µ–Ω—è–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤. –ß—Ç–æ–±—ã –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ø–æ—Å–ª–µ —Ç–∞–∫–∏—Ö
  // ¬´–ª–µ–Ω–∏–≤—ã—Ö¬ª –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –µ—â—ë –∏ –Ω–∞ characterData.
  observer.observe(document.body, { childList: true, subtree: true, characterData: true });

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  chrome.storage.onChanged.addListener(loadAndFilter);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initFiltering);
} else {
  initFiltering();
} 